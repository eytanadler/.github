parameters:
  - name: REPO_NAME
    type: string
  - name: GCC_CONFIG
    type: string
  - name: INTEL_CONFIG
    type: string
  - name: BUILD
    type: string
  - name: TEST
    type: string
  - name: IMAGE
    type: string
  - name: TIMEOUT
    type: number
  - name: COVERAGE
    type: boolean

jobs:
  - job:
    pool:
      vmImage: "ubuntu-20.04"
    timeoutInMinutes: ${{ parameters.TIMEOUT }}
    strategy:
      matrix:
        "c7-intel-impi-stable":
          DOCKER_TAG: c7-intel-impi-stable
          CONFIG_FILE: ${{ parameters.INTEL_CONFIG }}
        "u20-gcc-ompi-latest":
          DOCKER_TAG: u20-gcc-ompi-latest
          CONFIG_FILE: ${{ parameters.GCC_CONFIG }}
        "u20-gcc-ompi-stable":
          DOCKER_TAG: u20-gcc-ompi-stable
          CONFIG_FILE: ${{ parameters.GCC_CONFIG }}
        "tacc-u18-gcc-impi-stable":
          DOCKER_TAG: tacc-u18-gcc-impi-stable
          CONFIG_FILE: ${{ parameters.GCC_CONFIG }}
    variables:
      - group: Docker
      - group: Codecov
      - name: MDOLAB_HOMEDIR
        value: /home/mdolabuser
      - name: DOCKER_WORKING_DIR
        value: ${{ variables.MDOLAB_HOMEDIR }}/repos/${{ parameters.REPO_NAME }}
      - name: DOCKER_MOUNT_DIR
        value: ${{ variables.MDOLAB_HOMEDIR }}/azure/${{ parameters.REPO_NAME }}
      - name: BASHRC
        value: ${{ variables.MDOLAB_HOMEDIR }}/.bashrc_mdolab
    steps:
      - checkout: self
      - checkout: azure_template
      - script: |
          # This is a trusted build if DOCKER_USERNAME is defined
          if [[ ! -z $(DOCKER_USERNAME) ]] ; then
            echo $(DOCKER_PASSWORD) | docker login -u $(DOCKER_USERNAME) --password-stdin;
          fi
          # "auto" pulls the private image for trusted builds
          if [[ "${{ parameters.IMAGE }}" == "private" ]] || [[ "${{ parameters.IMAGE }}" == "auto" && ! -z $(DOCKER_USERNAME) ]] ; then
            export DOCKER_REPO=private;
          else
            export DOCKER_REPO=public;
          fi
          docker pull mdolab/$DOCKER_REPO:$(DOCKER_TAG);
          docker run -t -d --name app --mount "type=bind,src=$(pwd)/${{ parameters.REPO_NAME }},target=${{ variables.DOCKER_MOUNT_DIR }}" mdolab/$DOCKER_REPO:$(DOCKER_TAG) /bin/bash;
          docker exec app /bin/bash -c "rm -rf ${{ variables.DOCKER_WORKING_DIR }} && cp -r ${{ variables.DOCKER_MOUNT_DIR }} ${{ variables.DOCKER_WORKING_DIR }}"
        displayName: Prepare Repository
      - script: docker exec -e CONFIG_FILE=$(CONFIG_FILE) app /bin/bash -c ". ${{ variables.BASHRC }} && cd ${{ variables.DOCKER_WORKING_DIR }} && /bin/bash ${{ parameters.BUILD }}"
        displayName: Build
        condition: ne('${{ parameters.BUILD }}', 'None')
      - script: docker exec -e AGENT_NAME="$AGENT_NAME" -e BUILD_REASON=$(Build.Reason) app /bin/bash -c ". ${{ variables.BASHRC }} && cd ${{ variables.DOCKER_WORKING_DIR }} && /bin/bash ${{ parameters.TEST }}"
        displayName: Run Tests
        condition: ne('${{ parameters.TEST }}', 'None')
      - script: |
          # validate bash script
          curl https://keybase.io/codecovsecurity/pgp_keys.asc | gpg --no-default-keyring --keyring trustedkeys.gpg --import
          curl -Os https://uploader.codecov.io/latest/linux/codecov
          curl -Os https://uploader.codecov.io/latest/linux/codecov.SHA256SUM
          curl -Os https://uploader.codecov.io/latest/linux/codecov.SHA256SUM.sig
          gpgv codecov.SHA256SUM.sig codecov.SHA256SUM
          shasum -a 256 -c codecov.SHA256SUM

          # get the environment variable script to pass to Docker
          ci_env=`bash <(curl -s https://codecov.io/env)`
          # grab the token
          if [[ ! -z ${${{ parameters.REPO_NAME }}_CODECOV_TOKEN} ]] ; then
            echo "codecov token found!"
            export CODECOV_TOKEN=${${{ parameters.REPO_NAME }}_CODECOV_TOKEN}
            export CODECOV_ARGS="-t $CODECOV_TOKEN -C $(Build.SourceVersion)"
          else
            export CODECOV_ARGS="-C $(Build.SourceVersion)"
          fi

          # run codecov inside Docker
          docker exec $ci_env -e CI=true -e CODECOV_ARGS=$CODECOV_ARGS app /bin/bash -c ". ${{ variables.BASHRC }} && cd ${{ variables.DOCKER_WORKING_DIR }} && \
          curl -Os https://uploader.codecov.io/latest/linux/codecov && chmod +x codecov && \
          # move coverage file to root, then convert to XML
          mv \$(find . -name ".coverage" -type f) . && coverage xml && \
          ./codecov $CODECOV_ARGS"
        condition: ${{ parameters.COVERAGE }}
        displayName: Coverage
