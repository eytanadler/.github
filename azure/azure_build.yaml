parameters:
- name: REPO_NAME
  type: string
- name: GCC_CONFIG
  type: string
- name: INTEL_CONFIG
  type: string
- name: BUILD
  type: string
- name: TEST
  type: string
- name: IMAGE
  type: string
- name: TIMEOUT
  type: number

jobs:
- job:
  pool:
    vmImage: 'ubuntu-20.04'
  timeoutInMinutes: ${{ parameters.TIMEOUT }}
  strategy:
    matrix:
      'c7-gcc-ompi-latest':
        DOCKER_TAG: c7-gcc-ompi-latest
        CONFIG_FILE: ${{ parameters.GCC_CONFIG }}
      'c7-intel-impi-latest':
        DOCKER_TAG: c7-intel-impi-latest
        CONFIG_FILE: ${{ parameters.INTEL_CONFIG }}
      'u20-gcc-ompi-latest':
        DOCKER_TAG: u20-gcc-ompi-latest
        CONFIG_FILE: ${{ parameters.GCC_CONFIG }}
      'u20-gcc-ompi-stable':
        DOCKER_TAG: u20-gcc-ompi-stable
        CONFIG_FILE: ${{ parameters.GCC_CONFIG }}
  variables:
  - group: Docker
  - name: MDOLAB_USER
    value: /home/mdolabuser/
  - name: DOCKER_WORKING_DIR
    value: ${{ variables.MDOLAB_USER }}/repos/${{ parameters.REPO_NAME }}
  - name: DOCKER_MOUNT_DIR
    value: ${{ variables.MDOLAB_USER }}/azure/${{ parameters.REPO_NAME }}
  steps:
  - script: |
      # This is a trusted build if DOCKER_USERNAME is defined
      if [[ ! -z $(DOCKER_USERNAME) ]] ; then
        echo $(DOCKER_PASSWORD) | docker login -u $(DOCKER_USERNAME) --password-stdin;
      fi
      # "auto" pulls the private image for trusted builds
      if [[ "${{ parameters.IMAGE }}" == "private" ]] || [[ "${{ parameters.IMAGE }}" == "auto" && ! -z $(DOCKER_USERNAME) ]] ; then
        export DOCKER_REPO=private
      else
        export DOCKER_REPO=public
      fi
      docker pull mdolab/$DOCKER_REPO:$(DOCKER_TAG);
      docker run -t -d --name app --mount "type=bind,src=$(pwd),target=${{ variables.DOCKER_MOUNT_DIR }}" mdolab/$DOCKER_REPO:$(DOCKER_TAG) /bin/bash;
      docker exec app /bin/bash -c "rm -rf ${{ variables.DOCKER_WORKING_DIR }} && cp -r ${{ variables.DOCKER_MOUNT_DIR }} ${{ variables.DOCKER_WORKING_DIR }}"
    displayName: Prepare Repository
  - script: docker exec -e CONFIG_FILE=$(CONFIG_FILE) app /bin/bash -c ". \$HOME/.bashrc_mdolab && cd ${{ variables.DOCKER_WORKING_DIR }} && /bin/bash ${{ parameters.BUILD }}"
    displayName: Build
    condition: ne('${{ parameters.BUILD }}', 'None')
  - script: docker exec -e AGENT_NAME="$AGENT_NAME" app /bin/bash -c ". \$HOME/.bashrc_mdolab && cd ${{ variables.DOCKER_WORKING_DIR }} && /bin/bash ${{ parameters.TEST }}"
    displayName: Run Tests
    condition: ne('${{ parameters.TEST }}', 'None')
